{"version":3,"sources":["components/game.jsx","components/home.jsx","App.js","serviceWorker.js","index.js"],"names":["Game","canvas","this","refs","width","clientWidth","height","clientHeight","_startGame","ctx","getContext","canvasPos","getBoundingClientRect","x","toFixed","document","onmousemove","e","screenX","screenY","ctrlKey","fillRect","react_default","a","createElement","className","react_router_dom","to","ref","style","window","innerWidth","backgroundColor","React","Component","Home","href","App","basename","react_router","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPA8CeA,8LAxCX,IAAMC,EAASC,KAAKC,KAAKF,OACzBA,EAAOG,MAAQH,EAAOI,YACtBJ,EAAOK,OAASL,EAAOM,aAEvBL,KAAKM,kDAIL,IAAMP,EAASC,KAAKC,KAAKF,OACnBQ,EAAMR,EAAOS,WAAW,MACxBC,EAAY,CAACV,EAAOW,wBAAwBC,EAAEC,UAAW,KAE/DC,SAASC,YAAc,SAACC,GACnBA,EAAEC,QAAUP,EAAU,IAAMM,EAAEE,QAAUR,EAAU,KAAoB,IAAdM,EAAEG,SAC3DX,EAAIY,SAASJ,EAAEC,QAAUP,EAAU,GAAK,GAAIM,EAAEE,QAAUR,EAAU,GAAK,GAAI,GAAI,oDAMnFI,SAASC,YAAc,8CAIvB,OACEM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,KACPL,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAlB,YAEFH,EAAAC,EAAAC,cAAA,6EACAF,EAAAC,EAAAC,cAAA,UACEI,IAAI,SACJC,MAAO,CAACvB,OAAQ,IAAKF,MAAO0B,OAAOC,WAAa,GAAIC,gBAAiB,mBApC5DC,IAAMC,WCgBVC,EAhBF,WACX,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,6CACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,4EAAmEF,EAAAC,EAAAC,cAAA,KAAGY,KAAK,+BAAR,WAAnE,OAGJd,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,UACPL,EAAAC,EAAAC,cAAA,oCCGOa,EAXH,WACV,OACEf,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQY,SAAS,gBACfhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWP,IACjCb,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAW1C,OCEpB2C,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASlC,SAASmC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.98a0a63e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Game extends React.Component{\r\n\r\n  componentDidMount() {\r\n    const canvas = this.refs.canvas;\r\n    canvas.width = canvas.clientWidth;\r\n    canvas.height = canvas.clientHeight;\r\n\r\n    this._startGame();\r\n  }\r\n\r\n  _startGame() {\r\n    const canvas = this.refs.canvas;\r\n    const ctx = canvas.getContext('2d');\r\n    const canvasPos = [canvas.getBoundingClientRect().x.toFixed(), 213];\r\n\r\n    document.onmousemove = (e) => {\r\n      if(e.screenX > canvasPos[0] && e.screenY > canvasPos[1] && e.ctrlKey !== true){\r\n        ctx.fillRect(e.screenX - canvasPos[0] - 10, e.screenY - canvasPos[1] - 10, 20, 20);\r\n      }\r\n    };\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.onmousemove = () => {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app-content\">\r\n        <h1>Paint</h1>\r\n        <Link to='/'>\r\n          <button className=\"exit-btn\">Go Home</button>\r\n        </Link>\r\n        <p>Move mouse on canvas to draw! Hold ctrl to move without drawing.</p>\r\n        <canvas\r\n          ref='canvas'\r\n          style={{height: 481, width: window.innerWidth - 50, backgroundColor: 'white'}}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"app-content\">\r\n      <div className=\"home-header\">\r\n        <h1>Canvas Vanilla JavaScript Paint</h1>\r\n        <div className=\"description\">\r\n          <span>Paint in Vanilla JavaScript. Created for fun in free time by <a href=\"https://github.com/snoh666/\">snoh666</a>.</span>\r\n        </div>\r\n      </div>\r\n      <Link to='/game/'>\r\n        <button>Go Play!</button>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;","import React from 'react';\nimport Game from './components/game';\nimport Home from  './components/home';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nconst App = () => {\n  return (\n    <Router basename=\"/react-paint\">\n      <div className=\"App\">\n        <Route exact path='/' component={Home} />\n        <Route path='/game/' component={Game} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}